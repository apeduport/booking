//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String     @id() @default(uuid())
  name            String?
  email           String?    @unique()
  pictureUrl      String?    @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  status          UserStatus @default(VERIFIED)
  globalRole      String     @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt()
  phone           String
  alternateNumber String?
  bookings        Booking[]  @relation("user")
}

/// @@allow('all', true)
model Course {
  id             String          @id() @default(uuid())
  name           String
  description    String?
  duration       Float
  studentCourses StudentCourse[] @relation("course")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Accommodation {
  id                    String                 @id() @default(uuid())
  name                  String
  type                  String
  description           String?
  bookingAccommodations BookingAccommodation[] @relation("accommodation")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Student {
  id                 String          @id() @default(uuid())
  name               String
  email              String
  phone              String?
  alternateNumber    String?
  eduportStatus      String?
  registrationNumber String?
  uniqueId           String?
  parents            Parent[]        @relation("student")
  bookings           Booking[]       @relation("student")
  studentCourses     StudentCourse[] @relation("student")
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Parent {
  id              String   @id() @default(uuid())
  name            String
  email           String
  phone           String?
  alternateNumber String?
  studentId       String
  student         Student? @relation(fields: [studentId], references: [id], name: "student")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Booking {
  id                    String                 @id() @default(uuid())
  bookingFee            String
  status                String
  receiptNumber         String?
  scholarshipPreference Boolean
  userId                String
  user                  User?                  @relation(fields: [userId], references: [id], name: "user")
  studentId             String
  student               Student?               @relation(fields: [studentId], references: [id], name: "student")
  bookingAccommodations BookingAccommodation[] @relation("booking")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt()
}

/// @@allow('all', true)
model BookingAccommodation {
  id              String         @id() @default(uuid())
  status          String
  bookingId       String
  booking         Booking?       @relation(fields: [bookingId], references: [id], name: "booking")
  accommodationId String
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id], name: "accommodation")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model StudentCourse {
  id        String   @id() @default(uuid())
  status    String
  studentId String
  student   Student? @relation(fields: [studentId], references: [id], name: "student")
  courseId  String
  course    Course?  @relation(fields: [courseId], references: [id], name: "course")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}
